#!/bin/bash
#
# script to clean out 'old' build remnant before a new build occurs.
#

. clearenv

outputusage()
{
	echo "Usage: $0 [-l] [-o] [-p \"ARGS\"]"
	echo "   $0 will build the version of frontline"
	echo "   -l : log the output (causes process to be run as background job)"
	echo "   -o : Don't obfuscate"
	echo "   -p : pass on elements contained within \"ARGS\" to the buildodm process"
	exit 2
}


usev=${FLVER:-"none"}
if [ $usev = "none" ]
then
	echo no FLVER set
	outputusage
	exit
fi


vermajor=`echo $usev | cut -d- -f1`
verrelse=`echo $usev | cut -d- -f2`
verminor=`echo $usev | cut -d- -f3`
verbuild=`echo $usev | cut -d- -f4`

clean=n
log=y
eclipse=n
valid=1
passthrough=
obfuscate=

OPTIND=1
while getopts "lop:" Option
do
  case $Option in
    l     ) log=y;;
    o     ) obfuscate=-o;;
    p     ) passthrough=$OPTARG;;
    *     ) valid=0;;   # DEFAULT, any other options are invalid
  esac
done

shift $(($OPTIND - 1))

if [ $valid = 0 ]
then
	outputusage
fi


echo "using Version $usev environment"
if [ $eclipse = "y" ]
then
	. envbuild -e
else
	. envbuild 
fi

# only clean up the standard build environment
if [ $clean = "y" -a $eclipse = "n" ];
then
	cleanbuild
fi

cd $MY_ROOT_DIR/projects/lagancentre/build/frontline/buildscripts

if [ ! -f ./buildutil.ksh ];
then
  echo "could not find ./buildutil.ksh, you are not in correct directory"
fi


echo "build dir: $MY_BUILD_DIR"

mycommand="./buildutil.ksh $obfuscate $passthrough"
echo $mycommand

export BASH_ENV=/h/shell/tools_lagan/buildshell
if [ $log = "y" ];
then
	logfile=$MY_ROOT_DIR/buildutil.log
	echo logging to $logfile
	bash $mycommand > $logfile 2>&1
	grep -A 2 -i "\^" $logfile 2>&1 >/dev/null
	ok=$?
	if [ "$ok" = "0" ]; then
		echo "compilation errors found"
		grep -B 4 -i "\^" $logfile
	fi
else
	bash $mycommand
fi

# $Id: buildutil,v 1.4 2004/12/15 17:47:15 gary Exp $
